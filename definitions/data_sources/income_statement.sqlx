-- The purpose of this data table is to provide a single way to traverse from NetSuite revenue data back to Salesforce customers and SOWs and Harvest customers and projects.
config {
  type: "table",
  database: "adswerve-finance",
  schema: "reporting_data",
  name: "income_statement",
  dependencies: "income_statement_all"
}


-- step 1 brings in the appropriate NetSuite project ID and NetSuite customer ID into the revenue data. This is needed as NetSuite by default commingles the two objects which creates multiple steps to follow each relationship individually.
WITH act_step_1 AS (
SELECT 
  d.* EXCEPT (internal_id, period),
  p.internal_id as project_id,
  p.harvest_id,
  IFNULL(c.internal_id, p.customer_internal_id) as customer_id
FROM `adswerve-finance.raw_data.income_statement_all` d
LEFT JOIN `adswerve-finance.Warehouse.Project` p ON d.Internal_ID = p.internal_id
LEFT JOIN `adswerve-finance.Warehouse.Customer` c ON d.Internal_ID = c.internal_id
),


-- step 2 brings in the appropriate NetSuite parent customer ID. NetSuite has children customers used for billing that are irrelevant to the rest of the business so reporting should generally be handled at the parent. This step also include clean up of the account_category field.
act_step_2 AS (
SELECT 
  act_step_1.*,
  c.parent_id,
  IF(c.account_category = 'Direct Marketer', 'Marketer', c.account_category) as account_category
FROM act_step_1
LEFT JOIN `adswerve-finance.Warehouse.Customer` c
ON act_step_1.customer_id = c.internal_id
),


-- step 3 brings in the appropriate customer Salesforce_id for reporting. Salesforce and NetSuite have different customer architectures and the correct way to join the two is to role up NetSuite to the parent and join on the Salesforce Id that is logged in NetSuite.  
act_step_3 AS (
SELECT
 act_step_2.*,
 c.salesforce_id as sfdc_customer_id,
 a.acct_type as account_type,
FROM act_step_2
LEFT JOIN `adswerve-finance.Warehouse.Customer` c
ON act_step_2.parent_id = c.internal_id
LEFT JOIN `adswerve-finance.Warehouse.Account` a
ON act_step_2.account_number = a.number
),

-----------------------------------------------------------------------------FCST---------------------------------------------------------------------
--step 1 gathers all data and brings in the table suffix used for naming the forecast
------------------------------------------------------------------------------------------------------------------------------------------------------
fcst_step_1 AS (
  SELECT
    *,
    routines.scenario(_TABLE_SUFFIX) as scenario
  FROM
    `adswerve-finance.Fin_Stage.BigQuery_BudgetTemplate*`
    ),
  
-- step 2 unpivots the forecasted data reports
fcst_step_2 AS (
SELECT * FROM fcst_step_1
UNPIVOT(Amount FOR Period IN (   
     Jan
    ,Feb
    ,Mar
    ,Apr 
    ,May
    ,Jun 
    ,Jul 
    ,Aug 
    ,Sep 
    ,Oct 
    ,Nov 
    ,Dec))
  ),

-- step 3 organizing, cleaning and stardardizing data. Forecast reporting is generated from a NetSuite financial report and Income Statement data is generated from a saved search. The below operations will algin the data to the Income Statement.
fcst_step_3 AS (
  SELECT
    fcst_step_2.scenario,
    a.display_name AS account,
    IFNULL(cl.NAME, "- None -") AS class,
    IFNULL(d.name, "- None -") AS department,
    SAFE_CAST(REPLACE(fcst_step_2.Amount, '$', '') AS NUMERIC) as amount,
    fcst_step_2.Account_Number AS account_number,
    DATE(SAFE_CAST(LEFT(fcst_step_2.scenario, 4) AS INT), EXTRACT(MONTH FROM PARSE_DATE('%b', period)),1) as date,
    CAST(NULL as STRING) as project_id,
    CAST(NULL as STRING) as harvest_id,
    CAST(NULL as STRING) as customer_id,
    CAST(NULL as STRING) as parent_id,
    fcst_step_2.Client_Type as account_category,
    CAST(NULL as STRING) as sfdc_customer_id,
    a.acct_type as account_type,
  FROM fcst_step_2
  LEFT JOIN `adswerve-finance.Warehouse.Class` cl
  ON fcst_step_2.Class_Name = cl.NAME_FLAT
  LEFT JOIN `adswerve-finance.Warehouse.Department` d
  ON fcst_step_2.Department_Name = d.name_flat
  LEFT JOIN `adswerve-finance.Warehouse.Account` a
  ON fcst_step_2.Account_Number = a.number
  WHERE Account_Number IS NOT NULL
),

------------------------------------------------------------------------------COMBINED----------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------

step_4 AS (
  SELECT 
    "Actual" as scenario,
    * 
  FROM act_step_3
  UNION ALL
  SELECT
    *
  FROM
    fcst_step_3
),

--step 4 brings in core reporting dimensions. Due to the GL structure and class there is a need to differentiate service categories with a case statement. Using class we can determine if a service should be grouped in Media, Analytics or Adobe.
step_5 AS (
SELECT 
  step_4.* EXCEPT (amount),
  routines.service_cast(a.internal_income_statment, step_4.class) AS internal_income_statement, -- internal_income_statement is a summary view used in most financial statements. It categorizes gross billings and commingles passthru and reseller expense. Net Revenue by product cannot be produced by this column.
  routines.service_cast(a.internal_net_revenue, step_4.class) AS internal_net_revenue,
  routines.service_cast(a.internal_net_revenue_detail, step_4.class) AS internal_net_revenue_detail,
  routines.segment_cast(a.internal_net_revenue_detail, step_4.class, step_4.account_number, a.revenue_segement) AS revenue_segement, -- revenue_segment is the highest level of a rollup for Media vs. Analytics. This dimension should allow from a summary of Media vs. Analytics revenue.
  CASE 
    WHEN a.acct_type NOT LIKE "%Income%" AND a.acct_type != "Statistical" THEN step_4.amount * -1
    ELSE step_4.amount
  END as amount
FROM step_4
LEFT JOIN `adswerve-finance.Warehouse.Account` a
ON step_4.account_number = a.number
)

SELECT * FROM step_5
